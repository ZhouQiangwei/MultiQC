#!/usr/bin/env python

""" MultiQC submodule to parse output from correlation matrix data generated by plotCorrelation from deepTools """

import logging

from multiqc import config
from multiqc.plots import heatmap as hm

#Initialise the logger
log = logging.getLogger('multiqc.modules.deepTools')


def parse_reports(self):

    #Set up vars
    self.heatmap_data = dict()

    #Default search pattern
    sp = config.sp['deepTools']['Corr']

    #Go through files and parse data
    found_heatmap = False
    for f in self.find_log_files(sp):
        # Parse the file
        xcats = None
        ycats = []
        data = []
        for l in f['f'].splitlines():
            s = l.split()
            if xcats is None:
                xcats = s
            else:
                ycats.append(s[0])
                data.append([float(x) for x in s[1:]])
        #Should only have one heat map per report
        if found_heatmap:
            log.warning("Duplicate sample name found! Overwriting: {}".format(f['s_name']))
        found_heatmap = True
        self.add_data_source(f, section='Correlation')

    if found_heatmap:
        pconfig = {
            'title': 'Samples correlation',
            'reverseColors': False
        }
        self.sections.append({
            'name': 'Samples Similarity',
            'anchor': 'deepToolsheatmap',
            'content': '<p>This heatmap was generated by ' + '<a href="http://deeptools.readthedocs.io/en/latest/content/tools/plotCorrelation.html" target="_blank">plotCorrelation</a> ' + ' based on the output of ' + '<a href="http://deeptools.readthedocs.io/en/latest/content/tools/multiBamSummary.html" target="_blank">multiBamSummary</a> or' + '<a href="http://deeptools.readthedocs.io/en/latest/content/tools/multiBigwigSummary.html" target="_blank">multiBigwigSummary</a>' + '</p>' +
                hm.plot(data, xcats, ycats, pconfig)
        })

    #Return number of samples found
    return 1 if found_heatmap else 0


